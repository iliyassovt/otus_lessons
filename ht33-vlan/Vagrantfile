# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
:inetRouter => {
      :box_name => "centos/7",
      # :public => {:ip => '172.16.1.101', :adapter => 1},
      # :public => {adapter: 1, auto_config: true},
      :net => [
                  {adapter: 2, auto_config: false, virtualbox__intnet: "router-net"},
                  {adapter: 3, auto_config: false, virtualbox__intnet: "router-net"}
              ]
  },
:centralRouter => {
      :box_name => "centos/7",
      :net => [
                  {adapter: 2, auto_config: false, virtualbox__intnet: "router-net"},
                  {adapter: 3, auto_config: false, virtualbox__intnet: "router-net"}
              ]
},
:testServer1 => {
      :box_name => "centos/7",
      :net => [
        {adapter: 2, auto_config: false, virtualbox__intnet: "central-test"}
              ]
  },
:testServer2 => {
      :box_name => "centos/7",
      :net => [
        {adapter: 2, auto_config: false, virtualbox__intnet: "central-test"}
              ]
  },
:testClient1 => {
      :box_name => "centos/7",
      :net => [
        {adapter: 2, auto_config: false, virtualbox__intnet: "central-test"}
              ]
  },
:testClient2 => {
      :box_name => "centos/7",
      :net => [
        {adapter: 2, auto_config: false, virtualbox__intnet: "central-test"}
              ]
  }
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s

        config.vm.provider "virtualbox" do |v|
          v.memory = 256
        end

        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
        
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
        end        
        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
                cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        case boxname.to_s
        when "inetRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            # start bonding
            echo -e 'NM_CONTROLED=no\nDEVICE=bond0\nONBOOT=yes\nTYPE=Bond\nBONDING_MASTER=yes\nIPADDR=192.168.255.1\nPREFIX=30\nBOOTPROTO=static\nBONDING_OPTS="mode=1 miimon=100 fail_over_mac=1"' > /etc/sysconfig/network-scripts/ifcfg-bond0
            echo -e "NM_CONTROLED=no\nBOOTPROTO=static\nONBOOT=yes\nDEVICE=eth1\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth1
            echo -e "NM_CONTROLED=no\nBOOTPROTO=static\nONBOOT=yes\nDEVICE=eth2\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth2
            systemctl restart network
            # end bonding
            iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth0 -j MASQUERADE
            ip route add 192.168.0.0/16 via 192.168.255.2
            SHELL
        when "centralRouter"
          box.vm.provision "shell", run: "always", inline: <<-SHELL
            echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
            # echo "net.ipv4.conf.all.forwarding=1"  >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            echo -e 'NM_CONTROLED=no\nDEVICE=bond0\nONBOOT=yes\nTYPE=Bond\nBONDING_MASTER=yes\nIPADDR=192.168.255.2\nPREFIX=30\nGATEWAY=192.168.255.1\nBOOTPROTO=static\nBONDING_OPTS="mode=1 miimon=100 fail_over_mac=1"' > /etc/sysconfig/network-scripts/ifcfg-bond0
            echo -e "NM_CONTROLED=no\nBOOTPROTO=static\nONBOOT=yes\nDEVICE=eth1\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth1
            echo -e "NM_CONTROLED=no\nBOOTPROTO=static\nONBOOT=yes\nDEVICE=eth2\nMASTER=bond0\nSLAVE=yes" > /etc/sysconfig/network-scripts/ifcfg-eth2
            echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth0
            systemctl restart network
            SHELL
        end
      end

  end

  config.vm.provision "ansible" do |ansible|
    ansible.verbose = "vvv"
    ansible.playbook = "provisioning/playbook.yml"
    ansible.sudo = "true"
  end
  
  
end